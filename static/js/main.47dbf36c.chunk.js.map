{"version":3,"sources":["utils.tsx","store/actions/forecast.tsx","store/actions/types.tsx","components/DateBasicInfo/DateBasicInfo.Component.tsx","components/DateBasicInfo/index.tsx","components/ConditionsInfo/ConditionsInfo.Component.tsx","components/ConditionsInfo/index.tsx","components/HourlyForecastUnit/HourlyForecastUnit.Component.tsx","components/HourlyForecastUnit/index.tsx","components/HourlyForecastUnit/HourlyForecastUnit.container.tsx","components/HourlyForecastSummary/HourlyForecastSummary.Component.tsx","components/HourlyForecastSummary/index.tsx","components/ForecastUnit/ForecastUnit.Component.tsx","components/ForecastUnit/index.tsx","components/ForecastUnit/ForecastUnit.container.tsx","components/ForecastSummary/ForecastSummary.Component.tsx","components/ForecastSummary/index.tsx","components/WeatherWidget/WeatherWidget.Component.tsx","App.tsx","components/WeatherWidget/WeatherWidget.container.tsx","serviceWorker.ts","store/reducers/forecast.tsx","store/reducers/index.tsx","store/index.tsx","index.tsx"],"names":["ApiService","axios","get","response","data","ForecastService","Object","classCallCheck","this","createClass","key","value","date","Date","toLocaleDateString","weekday","weatherData","list","weeklyForecast","weeklyForecastFormatted","cityName","currentWeather","city","day","degrees","description","hour","icon","max","min","rain","wind","item","HourlyForecastSummaryList","map","name","country","dayName","getDayName","dt_txt","currentForecastItem","getFormattedForecastItem","undefined","push","length","currentItem","_this","hourlyForecast","switchVar","some","dt","split","slice","weather","Math","round","main","temp_max","temp_min","speed","temp","updateCurrentForecast","dispatch","type","payload","current","WeatherImage","styled","img","_templateObject","DateInfoText","text","_templateObject2","DegreeText","_templateObject3","CityText","_templateObject4","DateDescriptionText","_templateObject5","DateBasicInfoContainer","div","_templateObject6","ImageDegreeContainer","_templateObject7","DateBasicInfo","_this$props","props","iconImage","react_default","a","createElement","src","Component","ConditionsInfoText","ConditionsInfo_Component_templateObject","ConditionsInfoContainer","ConditionsInfo_Component_templateObject2","ConditionsInfo","HourlyForecastUnitContainer","HourlyForecastUnit_Component_templateObject","ForecastUnitButton","button","HourlyForecastUnit_Component_templateObject2","HourlyForecastUnit_Component_templateObject3","TimeText","HourlyForecastUnit_Component_templateObject4","HourlyForecastUnit","_this$props$forecast","forecast","onClick","HourlyForecastUnit_Component_DegreeText","connect","state","HourlyForecastSummaryContainer","HourlyForecastSummary_Component_templateObject","HourlyForecastSummary","index","content","components_HourlyForecastUnit","ForecastUnitContainer","ForecastUnit_Component_templateObject","ForecastUnit_Component_templateObject2","TextContainer","ForecastUnit_Component_templateObject3","ForecastUnit_Component_templateObject4","DateText","ForecastUnit_Component_templateObject5","DegreeLeftText","ForecastUnit_Component_templateObject6","DegreeRightText","ForecastUnit_Component_templateObject7","_templateObject8","ForecastUnit_Component_ForecastUnitButton","substring","ForecastUnit_Component_WeatherImage","ForecastUnit","ForecastSummaryContainer","ForecastSummary_Component_templateObject","ForecastSummary","WidgetContainer","WeatherWidget_Component_templateObject","TopContainer","WeatherWidget_Component_templateObject2","CurrentInfoContainer","WeatherWidget_Component_templateObject3","BottomContainer","WeatherWidget_Component_templateObject4","WeatherComponent","fetchForecastList","components_DateBasicInfo","components_ConditionsInfo","components_HourlyForecastSummary","hourly","components_ForecastSummary","weekly","WeatherWidget","_ref","asyncToGenerator","regenerator_default","mark","_callee","processedForecastData","wrap","_context","prev","next","getWeatherForecast","sent","processForecastData","rawList","stop","_x","apply","arguments","Boolean","window","location","hostname","match","initialState","combineReducers","action","objectSpread","getHourlyForecast","middleware","thunk","store","enhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","reducers","configureStore","ReactDOM","render","es","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47dbf36c.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Forecast } from \"./types\";\n\nconst DATA_URL =\n  \"https://api.openweathermap.org/data/2.5/forecast?q=Edinburgh,uk&APPID=5902e987084211ae3f2fe0ed9fbafca9&units=metric\";\nexport const MAX_HOURLY_DISPLAY_DATE = 8;\nexport default class ApiService {\n  static async getWeatherForecast(): Promise<Array<any>> {\n    const response = await axios.get(DATA_URL);\n    return response.data;\n  }\n}\n\nexport class ForecastService {\n  static getDayName(date: string) {\n    return new Date(date).toLocaleDateString(\"EN-GB\", { weekday: \"long\" });\n  }\n  static processForecastData(weatherData: any): any {\n    const list = weatherData.list;\n\n    let weeklyForecast: any = [];\n    let weeklyForecastFormatted: any = [];\n    let cityName: string = \"\";\n    let currentWeather: Forecast = {\n      city: \"\",\n      day: \"\",\n      degrees: 0,\n      description: \"\",\n      hour: \"\",\n      icon: \"\",\n      max: 0,\n      min: 0,\n      rain: 0,\n      wind: 0,\n      item: {}\n    };\n    let HourlyForecastSummaryList: any = [];\n\n    list.map((item: any) => {\n      cityName = weatherData.city.name + \" \" + weatherData.city.country;\n      const dayName = ForecastService.getDayName(item.dt_txt);\n      const currentForecastItem = ForecastService.getFormattedForecastItem(\n        item,\n        cityName\n      );\n\n      if (currentWeather.city === \"\") {\n        currentWeather = currentForecastItem;\n      }\n      if (weeklyForecast[dayName] === undefined) {\n        weeklyForecast[dayName] = true;\n        weeklyForecastFormatted.push(currentForecastItem);\n      }\n      if (HourlyForecastSummaryList.length <= MAX_HOURLY_DISPLAY_DATE) {\n        HourlyForecastSummaryList.push(currentForecastItem);\n      }\n    });\n    return {\n      weeklyForecastFormatted,\n      cityName,\n      currentWeather,\n      HourlyForecastSummaryList\n    };\n  }\n  static getHourlyForecast(list: any, currentItem: any): Array<Forecast> {\n    const city = currentItem.city;\n    let hourlyForecast: Array<Forecast> = [];\n    let switchVar = 0;\n    list.some((item: any) => {\n      if (item.dt == currentItem.item.dt) {\n        hourlyForecast.push(this.getFormattedForecastItem(item, city));\n        switchVar++;\n      } else if (switchVar > 0 && switchVar <= MAX_HOURLY_DISPLAY_DATE) {\n        hourlyForecast.push(this.getFormattedForecastItem(item, city));\n        switchVar++;\n      }\n      if (switchVar > MAX_HOURLY_DISPLAY_DATE) {\n        return true;\n      }\n    });\n    return hourlyForecast;\n  }\n\n  static getFormattedForecastItem(item: any, city: string): Forecast {\n    const dateData = item.dt_txt.split(\" \");\n    const hour = dateData[1].slice(0, -3);\n\n    return {\n      day: this.getDayName(item.dt_txt),\n      city: city,\n      rain: item.rain? item.rain[\"3h\"] ? item.rain[\"3h\"] : 0: 0,\n      icon: item.weather[0].icon,\n      description: item.weather[0].description,\n      hour: hour,\n      max: Math.round(item.main.temp_max),\n      min: Math.round(item.main.temp_min),\n      wind: Math.round(item.wind.speed),\n      degrees: Math.round(item.main.temp),\n      item\n    };\n  }\n}\n","import ApiService, { ForecastService } from \"../../utils\";\nimport {\n  FETCH_FORECAST_LIST_FULFILLED,\n  FETCH_FORECAST_LIST_START,\n  UPDATE_CURRENT_FORECAST_FULFILLED,\n  UPDATE_CURRENT_FORECAST_START\n} from \"./types\";\n\nexport const fetchForecastList = () => async dispatch => {\n  dispatch({\n    type: FETCH_FORECAST_LIST_START\n  });\n  const weatherData: any = await ApiService.getWeatherForecast();\n  const processedForecastData = ForecastService.processForecastData(\n    weatherData\n  );\n\n  dispatch({\n    type: FETCH_FORECAST_LIST_FULFILLED,\n    payload: {\n      rawList: weatherData.list,\n      cityName: processedForecastData.cityName,\n      current: processedForecastData.currentWeather,\n      hourlyForecast: processedForecastData.HourlyForecastSummaryList,\n      weeklyForecast: processedForecastData.weeklyForecastFormatted\n    }\n  });\n};\n\nexport const updateCurrentForecast = (item: any, city: string) => dispatch => {\n  dispatch({ type: UPDATE_CURRENT_FORECAST_START });\n  dispatch({\n    type: UPDATE_CURRENT_FORECAST_FULFILLED,\n    payload: {\n      current: ForecastService.getFormattedForecastItem(item, city)\n    }\n  });\n};\n","export const FETCH_FORECAST_LIST_START = \"FETCH_FORECAST_LIST_START\";\nexport const FETCH_FORECAST_LIST_FULFILLED = \"FETCH_FORECAST_LIST_FULFILLED\";\nexport const UPDATE_CURRENT_FORECAST_START = \"UPDATE_CURRENT_FORECAST_START\";\nexport const UPDATE_CURRENT_FORECAST_FULFILLED =\n  \"UPDATE_CURRENT_FORECAST_FULFILLED\";\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst WeatherImage = styled.img`\n  width: 50px;\n  height: 50px;\n`;\nconst DateInfoText = styled.text`\n  color: rgb(135, 135, 135);\n  font-family: arial, sans-serif;\n`;\nconst DegreeText = styled.text`\n  color: rgb(33, 33, 33);\n  font-family: arial, helvetica, sans-serif;\n  font-size: 64px;\n`;\nconst CityText = styled(DateInfoText)`\n  font-size: 30px;\n  font-weight: 100;\n`;\n\nconst DateDescriptionText = styled(DateInfoText)`\n  font-size: 20px;\n`;\n\nconst DateBasicInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 150px;\n`;\n\nconst ImageDegreeContainer = styled.div`\n  display: flex;\n  width: 100px;\n  flex-direction: row;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\ntype MyProps = {\n  cityName: string;\n  day: string;\n  description: string;\n  icon: string;\n  degrees: number;\n};\nexport default class DateBasicInfo extends Component<MyProps, {}> {\n  render() {\n    const { cityName, day, description, icon, degrees } = this.props;\n    const iconImage = \"https://openweathermap.org/img/w/\" + icon + \".png\";\n    return (\n      <DateBasicInfoContainer>\n        <CityText>{cityName}</CityText>\n        <DateDescriptionText>{day}</DateDescriptionText>\n        <DateDescriptionText>{description}</DateDescriptionText>\n        <ImageDegreeContainer>\n          <WeatherImage src={iconImage} />\n          <DegreeText>{degrees}</DegreeText>\n        </ImageDegreeContainer>\n      </DateBasicInfoContainer>\n    );\n  }\n}\n","import DateBasicInfo from \"./DateBasicInfo.Component\";\n\nexport default DateBasicInfo;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst ConditionsInfoText = styled.text`\n  color: rgb(135, 135, 135);\n  font-family: arial, helvetica, sans-serif;\n  font-size: 20px;\n`;\nconst ConditionsInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 150px;\n`;\ntype MyProps = {\n  rain: number;\n  wind: number;\n};\nexport default class ConditionsInfo extends Component<MyProps, {}> {\n  render() {\n    const { rain, wind } = this.props;\n    return (\n      <ConditionsInfoContainer>\n        <ConditionsInfoText>Rain in last 3h: {rain} mm</ConditionsInfoText>\n        <ConditionsInfoText>Wind Speed: {wind} mph</ConditionsInfoText>\n      </ConditionsInfoContainer>\n    );\n  }\n}\n","import ConditionsInfo from \"./ConditionsInfo.Component\";\n\nexport default ConditionsInfo;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Forecast } from \"../../types\";\n\nconst HourlyForecastUnitContainer = styled.div``;\n\nconst ForecastUnitButton = styled.button`\n  font-size: 11px;\n  color: rgb(34, 34, 34);\n  border: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst DegreeText = styled.text``;\nconst TimeText = styled.text``;\ntype MyProps = {\n  forecast: Forecast;\n  updateCurrentForecast(item: any, city: string): () => void;\n};\nexport default class HourlyForecastUnit extends Component<MyProps, {}> {\n  render() {\n    const { item, city, degrees, hour } = this.props.forecast;\n\n    return (\n      <HourlyForecastUnitContainer>\n        <ForecastUnitButton\n          onClick={() => {\n            this.props.updateCurrentForecast(item, city);\n          }}\n        >\n          <DegreeText>{degrees}</DegreeText>\n          <hr />\n          <TimeText>{hour}</TimeText>\n        </ForecastUnitButton>\n      </HourlyForecastUnitContainer>\n    );\n  }\n}\n","import HourlyForecastUnit from \"./HourlyForecastUnit.container\";\n\nexport default HourlyForecastUnit;\n","import { updateCurrentForecast } from \"../../store/actions/forecast\";\nimport { connect } from \"react-redux\";\n\nimport HourlyForecastUnit from \"./HourlyForecastUnit.Component\";\n\nconst mapStateToProps = state => ({\n  city: state.forecast.city,\n  current: state.forecast.current\n});\nconst mapDispatchToProps = (dispatch: any): any => ({\n  updateCurrentForecast: (item: any, city: string) =>\n    dispatch(updateCurrentForecast(item, city))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(HourlyForecastUnit);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport HourlyForecastUnit from \"../HourlyForecastUnit\";\nimport { Forecast } from \"../../types\";\n\nconst HourlyForecastSummaryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-top: 10px;\n`;\ntype MyProps = {\n  list: Array<Forecast>;\n};\nexport default class HourlyForecastSummary extends Component<MyProps, {}> {\n  render() {\n    let index: number = 0;\n    const content = this.props.list.map(forecast => {\n      index++;\n      return <HourlyForecastUnit key={index} forecast={forecast} />;\n    });\n    return (\n      <HourlyForecastSummaryContainer>{content}</HourlyForecastSummaryContainer>\n    );\n  }\n}\n","import HourlyForecastSummary from \"./HourlyForecastSummary.Component\";\n\nexport default HourlyForecastSummary;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Forecast } from \"../../types\";\n\nconst ForecastUnitContainer = styled.div`\n  height: 90px;\n  margin-top: 10px;\n  border: 1px;\n`;\n\nconst ForecastUnitButton = styled.button`\n  color: rgb(34, 34, 34);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst TextContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\nconst DegreeText = styled.text`\n  font-size: 13px;\n  font-weight: 400;\n  line-height: 15px;\n  font-family: arial, sans-serif;\n`;\nconst DateText = styled.text`\n  font-size: 18px;\n  color: #bababa;\n  padding-top: 7px;\n  line-height: 15px;\n  text-align: center;\n  font-weight: 400;\n`;\n\nconst DegreeLeftText = styled(DegreeText)`\n  color: rgb(135, 135, 135);\n  padding-right: 5px;\n`;\nconst DegreeRightText = styled(DegreeText)`\n  color: rgb(186, 186, 186);\n`;\nconst WeatherImage = styled.img`\n  width: 50px;\n  height: 50px;\n`;\n\ntype MyProps = {\n  forecast: any;\n  current: Forecast;\n  updateCurrentForecast(item: any, city: string): () => void;\n};\nexport default class HourlyForecastUnit extends Component<MyProps, {}> {\n  render() {\n    const { day, icon, max, min, item, city } = this.props.forecast;\n    const iconImage = \"https://openweathermap.org/img/w/\" + icon + \".png\";\n    return (\n      <ForecastUnitContainer>\n        <ForecastUnitButton\n          onClick={() => {\n            this.props.updateCurrentForecast(item, city);\n          }}\n        >\n          <DateText>{day.substring(0, 3)}</DateText>\n          <WeatherImage src={iconImage} />\n          <TextContainer>\n            <DegreeLeftText>{min}°</DegreeLeftText>\n            <DegreeRightText>{max}°</DegreeRightText>\n          </TextContainer>\n        </ForecastUnitButton>\n      </ForecastUnitContainer>\n    );\n  }\n}\n","import ForecastUnit from \"./ForecastUnit.container\";\n\nexport default ForecastUnit;\n","import { updateCurrentForecast } from \"../../store/actions/forecast\";\nimport { connect } from \"react-redux\";\n\nimport ForecastUnit from \"./ForecastUnit.Component\";\n\nconst mapStateToProps = state => ({\n  city: state.forecast.city,\n  current: state.forecast.current\n});\nconst mapDispatchToProps = (dispatch: any): any => ({\n  updateCurrentForecast: (item: any, city: string) =>\n    dispatch(updateCurrentForecast(item, city))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ForecastUnit);\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport ForecastUnit from \"../ForecastUnit\";\nimport { Forecast } from \"../../types\";\n\nconst ForecastSummaryContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\ntype MyProps = {\n  list: Array<Forecast>;\n};\nexport default class ForecastSummary extends Component<MyProps, {}> {\n  render() {\n    let index = 0;\n    let content;\n    if (this.props.list) {\n      content = this.props.list.map(forecast => {\n        index++;\n        return <ForecastUnit key={index} forecast={forecast} />;\n      });\n    }\n    return <ForecastSummaryContainer>{content}</ForecastSummaryContainer>;\n  }\n}\n","import ForecastSummary from \"./ForecastSummary.Component\";\n\nexport default ForecastSummary;\n","import React, { Component } from \"react\";\nimport DateBasicInfo from \"../DateBasicInfo\";\nimport ConditionsInfo from \"../ConditionsInfo\";\nimport styled from \"styled-components\";\nimport HourlyForecastSummary from \"../HourlyForecastSummary\";\nimport ForecastSummary from \"../ForecastSummary\";\nimport { Forecast, ForecastList } from \"../../types\";\n\nconst WidgetContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  width: 500px;\n`;\n\nconst TopContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CurrentInfoContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst BottomContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\ntype MyState = {\n  city: string;\n  list: Array<ForecastList>;\n  current: Forecast;\n};\ntype MyProps = {\n  fetchForecastList(): () => void;\n  list: Array<ForecastList>;\n  current: Forecast;\n  weekly: Array<Forecast>;\n  hourly: Array<Forecast>;\n};\nexport default class WeatherComponent extends Component<MyProps, MyState> {\n  componentWillMount(): void {\n    this.props.fetchForecastList();\n  }\n\n  render() {\n    return (\n      <WidgetContainer>\n        <TopContainer>\n          <CurrentInfoContainer>\n            {this.props.current &&\n              this.props.list.length > 0 && (\n                <DateBasicInfo\n                  cityName={this.props.current.city}\n                  day={this.props.current.day}\n                  description={this.props.current.description}\n                  icon={this.props.current.icon}\n                  degrees={this.props.current.degrees}\n                />\n              )}\n            {this.props.current &&\n              this.props.list.length > 0 && (\n                <ConditionsInfo\n                  rain={this.props.current.rain}\n                  wind={this.props.current.wind}\n                />\n              )}\n          </CurrentInfoContainer>\n          {this.props &&\n            this.props.list.length > 0 && (\n              <HourlyForecastSummary list={this.props.hourly} />\n            )}\n        </TopContainer>\n        <BottomContainer>\n          {this.props &&\n            this.props.list.length > 0 && (\n              <ForecastSummary list={this.props.weekly} />\n            )}\n        </BottomContainer>\n      </WidgetContainer>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport WeatherWidget from \"./components/WeatherWidget\";\n\nexport default WeatherWidget;\n","import { fetchForecastList } from \"../../store/actions/forecast\";\nimport { connect } from \"react-redux\";\n\nimport WeatherWidget from \"./WeatherWidget.Component\";\n\nconst mapStateToProps = state => ({\n  list: state.forecast.list,\n  city: state.forecast.city,\n  weekly: state.forecast.weeklyForecast,\n  hourly: state.forecast.hourlyForecast,\n  current: state.forecast.current\n});\nconst mapDispatchToProps = (dispatch: any): any => ({\n  fetchForecastList: () => dispatch(fetchForecastList())\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherWidget);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_FORECAST_LIST_FULFILLED,\n  UPDATE_CURRENT_FORECAST_FULFILLED\n} from \"../actions/types\";\nimport { ForecastService } from \"../../utils\";\n\nexport const initialState = {\n  list: [],\n  current: {},\n  city: \"\",\n  weeklyForecast: [],\n  hourlyForecast: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_FORECAST_LIST_FULFILLED:\n      return {\n        ...state,\n        list: action.payload.rawList,\n        city: action.payload.cityName,\n        weeklyForecast: action.payload.weeklyForecast,\n        hourlyForecast: action.payload.hourlyForecast,\n        current: action.payload.current\n      };\n    case UPDATE_CURRENT_FORECAST_FULFILLED:\n      const hourlyForecast = ForecastService.getHourlyForecast(\n        state.list,\n        action.payload.current\n      );\n      return {\n        ...state,\n        current: action.payload.current,\n        hourlyForecast\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport forecastReducer from \"./forecast\";\n\nexport default combineReducers({\n  forecast: forecastReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst configureStore = (initialState: Object = {}) => {\n  // @ts-ignore\n  const enableDevTools = !!window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n  // @ts-ignore\n  const composeEnhancers = enableDevTools ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n  const enhancers = composeEnhancers(applyMiddleware(...middleware));\n\n  return createStore(reducers, initialState, enhancers);\n};\n\nconst store = configureStore({});\n\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}